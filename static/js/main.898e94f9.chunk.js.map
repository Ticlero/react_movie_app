{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster","genres","synopsis","className","MoviePoster","alt","map","genre","key","MovieGenres","text","maxLine","ellipsis","trimRight","basedOn","src","PropTypes","string","isRequired","App","props","_callApi","fetch","then","res","json","jobjres","data","movies","catch","error","console","log","_getMovies","a","setState","_renderMovies","state","movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAoBA,SAASA,EAAT,GAAqD,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAEpC,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,kBACX,kBAACC,EAAD,CAAaJ,OAAQA,EAAQK,IAAKN,KAEtC,yBAAKI,UAAU,kBACX,4BAAKJ,GACL,yBAAKI,UAAU,iBACVF,EAAOK,KAAI,SAACC,EAAOC,GAAS,OAAO,kBAACC,EAAD,CAAaF,MAAOA,EAAOC,IAAKA,QAExE,yBAAKL,UAAU,mBACX,kBAAC,IAAD,CACIO,KAAOR,EACPS,QAAU,IACVC,SAAU,OACVC,WAAS,EACTC,QAAQ,eAOhC,SAASL,EAAT,GAAiC,IAAVF,EAAS,EAATA,MACnB,OACI,0BAAMJ,UAAU,gBAAgBI,EAAhC,KAGR,SAASH,EAAT,GAAuC,IAAhBJ,EAAe,EAAfA,OAAQK,EAAO,EAAPA,IAC3B,OACI,yBAAKF,UAAU,gBACXY,IAAKf,EACLK,IAAKA,EACLN,MAAOM,IA3CnBP,EAAMM,YAAc,CAChBJ,OAAQgB,IAAUC,OAAOC,YAG7BpB,EAAMW,YAAc,CAChBF,MAAOS,IAAUC,OAAOC,YA0CbpB,QCMAqB,E,YAxDb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAOPC,SAAU,WACT,OAAOC,MAAM,kEACZC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GACL,OAAOA,EAAQC,KAAKC,UAErBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAjBE,EAqBlBG,WArBkB,sBAqBL,4BAAAC,EAAA,sEACU,EAAKb,WADf,OACLO,EADK,OAEXG,QAAQC,IAAIJ,GACZ,EAAKO,SAAS,CACZP,WAJS,2CArBK,EAoClBQ,cAAgB,WAId,OAHe,EAAKC,MAAMT,OAAOtB,KAAI,SAACgC,GACpC,OAAO,kBAAC,EAAD,CAAOvC,MAAOuC,EAAMC,cAAevC,OAAQsC,EAAME,mBAAoBhC,IAAK8B,EAAMG,GAAIxC,OAAQqC,EAAMrC,OAAQC,SAAUoC,EAAMpC,eApCnI6B,QAAQC,IAAIZ,GAEZ,EAAKiB,MAAO,GAJI,E,iFA6BhBK,KAAKT,e,+BAiBL,OAFAF,QAAQC,IAAI,cAIV,yBAAK7B,UAAWuC,KAAKL,MAAMT,OAAQ,MAAQ,gBACtCc,KAAKL,MAAMT,OAAQc,KAAKN,gBAAxB,e,GAtDOO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.898e94f9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired,\r\n}\r\n\r\nMovie.MoviePoster = {\r\n    poster: PropTypes.string.isRequired,\r\n}\r\n\r\nMovie.MovieGenres = {\r\n    genre: PropTypes.string.isRequired,\r\n}\r\n\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n\r\n    return (\r\n        <div className=\"Movie\" >\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, key) => {return <MovieGenres genre={genre} key={key} />})}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis \r\n                        text= {synopsis}\r\n                        maxLine = \"3\"\r\n                        ellipsis= \" ...\"\r\n                        trimRight\r\n                        basedOn=\"letters\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nfunction MovieGenres({ genre }) {\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre} </span>\r\n    );\r\n}\r\nfunction MoviePoster({ poster, alt }) {\r\n    return (\r\n        <img className=\"Movie__Poster\"\r\n            src={poster}\r\n            alt={alt}\r\n            title={alt}></img>\r\n    );\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './movie.js'\n\nclass App extends Component {\n  //Render : Constructor -> static getDerivedStateFromProps() -> [(UNSAFE_Component will mount)] -> did render -> did mount\n  //Update : static getDerivedStateFromProps(props, state) -> [UNSAFE_componentWillReceiveProps()] shouldComponentUpdate() === true -> [UNSAFE_componentWillUpdate()]\n  //          -> render() -> componentDidUpdate()\n  // state = Component 안에 state가 변화할 때마다 render를 발생 [리액트 컴포넌트 안에 있는 오브젝트]\n  constructor(props){\n    super(props);\n    console.log(props);\n    //console.log(\"constructor: will mount\")\n    this.state ={};\n    \n  }\n  //promise = asychronous, good 시나리오 bed 시나리오 catch 관리\n   _callApi= () =>{\n    return fetch(\"https://yts.lt/api/v2/list_movies.json?limit=50?sort_by=rating\")\n    .then((res)=>{\n      return res.json();\n    })\n    .then((jobjres)=>{\n      return jobjres.data.movies\n    })\n    .catch((error)=>{\n      console.log(error);\n    });\n  }\n\n  _getMovies = async () =>{\n    const movies = await this._callApi();\n    console.log(movies);\n    this.setState({\n      movies//movies:movies\n    })\n  }\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  // UNSAFE_componentWillMount(){\n  //   console.log(\"UNSAFE_componentWillMount: will mount\")\n  // }\n  \n  _renderMovies = () =>{\n    const movies = this.state.movies.map((movie) =>{\n      return <Movie title={movie.title_english} poster={movie.medium_cover_image} key={movie.id} genres={movie.genres} synopsis={movie.synopsis}/>\n    });\n    return movies;\n  }\n\n  render() {\n    console.log(\"did render\");\n    //const { movies } = this.state;\n    return (\n      //JSX react 컴포넌트를 만들 때 사용하는 언어\n      <div className={this.state.movies? \"App\" : \"App--loading\"}>\n          {this.state.movies? this._renderMovies() : `Loading`}\n      </div>\n    )\n  };\n\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// <App /> App.js 라는 컴포넌트\n// ReactDOM은 react 로 만들어진 js파일 즉, 컴포넌트를 'root' Element에 렌더링을 해줌\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}